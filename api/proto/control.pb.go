// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/proto/control.proto

package lsfn

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// This gives the difference between a control that is boolean, one that's an int, and one that's a float.
type ControlDescription_ControlType int32

const (
	// Toggle: It's on or off, but when toggled it stays in it's on/off position until toggled again.
	ControlDescription_Toggle ControlDescription_ControlType = 0
	// Trigger: It's something that happens every time you trigger it then stops until triggered again.
	ControlDescription_Trigger ControlDescription_ControlType = 1
	// Throttle: It's a sliding value within a defined range (see below)
	ControlDescription_Throttle ControlDescription_ControlType = 2
)

var ControlDescription_ControlType_name = map[int32]string{
	0: "Toggle",
	1: "Trigger",
	2: "Throttle",
}

var ControlDescription_ControlType_value = map[string]int32{
	"Toggle":   0,
	"Trigger":  1,
	"Throttle": 2,
}

func (x ControlDescription_ControlType) String() string {
	return proto.EnumName(ControlDescription_ControlType_name, int32(x))
}

func (ControlDescription_ControlType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c4fb39f201265875, []int{1, 0}
}

type ThrottleRange struct {
	// The range of a throttle. These are ints, so you can safely do `(maximum - minimum) / step` to get the number of
	// steps. It's safe to assume that `minimum < maximum` and `step > 0`.
	Minimum              int32    `protobuf:"varint,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum              int32    `protobuf:"varint,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
	Step                 int32    `protobuf:"varint,3,opt,name=step,proto3" json:"step,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ThrottleRange) Reset()         { *m = ThrottleRange{} }
func (m *ThrottleRange) String() string { return proto.CompactTextString(m) }
func (*ThrottleRange) ProtoMessage()    {}
func (*ThrottleRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4fb39f201265875, []int{0}
}

func (m *ThrottleRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ThrottleRange.Unmarshal(m, b)
}
func (m *ThrottleRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ThrottleRange.Marshal(b, m, deterministic)
}
func (m *ThrottleRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThrottleRange.Merge(m, src)
}
func (m *ThrottleRange) XXX_Size() int {
	return xxx_messageInfo_ThrottleRange.Size(m)
}
func (m *ThrottleRange) XXX_DiscardUnknown() {
	xxx_messageInfo_ThrottleRange.DiscardUnknown(m)
}

var xxx_messageInfo_ThrottleRange proto.InternalMessageInfo

func (m *ThrottleRange) GetMinimum() int32 {
	if m != nil {
		return m.Minimum
	}
	return 0
}

func (m *ThrottleRange) GetMaximum() int32 {
	if m != nil {
		return m.Maximum
	}
	return 0
}

func (m *ThrottleRange) GetStep() int32 {
	if m != nil {
		return m.Step
	}
	return 0
}

// Describe a Control. Controls are things that the ship can do. For example firing lasers is a control, firing
// thrusters is a control, and throttling engines is a control.
type ControlDescription struct {
	Id          string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string                         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ControlType ControlDescription_ControlType `protobuf:"varint,3,opt,name=controlType,proto3,enum=lsfn.ControlDescription_ControlType" json:"controlType,omitempty"`
	// Only given for Throttle types
	ThrottleRange        *ThrottleRange `protobuf:"bytes,4,opt,name=throttleRange,proto3" json:"throttleRange,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ControlDescription) Reset()         { *m = ControlDescription{} }
func (m *ControlDescription) String() string { return proto.CompactTextString(m) }
func (*ControlDescription) ProtoMessage()    {}
func (*ControlDescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4fb39f201265875, []int{1}
}

func (m *ControlDescription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControlDescription.Unmarshal(m, b)
}
func (m *ControlDescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControlDescription.Marshal(b, m, deterministic)
}
func (m *ControlDescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlDescription.Merge(m, src)
}
func (m *ControlDescription) XXX_Size() int {
	return xxx_messageInfo_ControlDescription.Size(m)
}
func (m *ControlDescription) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlDescription.DiscardUnknown(m)
}

var xxx_messageInfo_ControlDescription proto.InternalMessageInfo

func (m *ControlDescription) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ControlDescription) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ControlDescription) GetControlType() ControlDescription_ControlType {
	if m != nil {
		return m.ControlType
	}
	return ControlDescription_Toggle
}

func (m *ControlDescription) GetThrottleRange() *ThrottleRange {
	if m != nil {
		return m.ThrottleRange
	}
	return nil
}

// Describe the state of a control. This is a message sent from the environment to the vessel to describe the current
// state.
type ControlState struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are valid to be assigned to ControlTypeValue:
	//	*ControlState_Toggle
	//	*ControlState_Throttle
	ControlTypeValue     isControlState_ControlTypeValue `protobuf_oneof:"ControlTypeValue"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *ControlState) Reset()         { *m = ControlState{} }
func (m *ControlState) String() string { return proto.CompactTextString(m) }
func (*ControlState) ProtoMessage()    {}
func (*ControlState) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4fb39f201265875, []int{2}
}

func (m *ControlState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControlState.Unmarshal(m, b)
}
func (m *ControlState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControlState.Marshal(b, m, deterministic)
}
func (m *ControlState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlState.Merge(m, src)
}
func (m *ControlState) XXX_Size() int {
	return xxx_messageInfo_ControlState.Size(m)
}
func (m *ControlState) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlState.DiscardUnknown(m)
}

var xxx_messageInfo_ControlState proto.InternalMessageInfo

func (m *ControlState) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type isControlState_ControlTypeValue interface {
	isControlState_ControlTypeValue()
}

type ControlState_Toggle struct {
	Toggle bool `protobuf:"varint,2,opt,name=toggle,proto3,oneof"`
}

type ControlState_Throttle struct {
	Throttle int32 `protobuf:"varint,3,opt,name=throttle,proto3,oneof"`
}

func (*ControlState_Toggle) isControlState_ControlTypeValue() {}

func (*ControlState_Throttle) isControlState_ControlTypeValue() {}

func (m *ControlState) GetControlTypeValue() isControlState_ControlTypeValue {
	if m != nil {
		return m.ControlTypeValue
	}
	return nil
}

func (m *ControlState) GetToggle() bool {
	if x, ok := m.GetControlTypeValue().(*ControlState_Toggle); ok {
		return x.Toggle
	}
	return false
}

func (m *ControlState) GetThrottle() int32 {
	if x, ok := m.GetControlTypeValue().(*ControlState_Throttle); ok {
		return x.Throttle
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ControlState) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ControlState_Toggle)(nil),
		(*ControlState_Throttle)(nil),
	}
}

// Strutually this message is the same as ControlState, but semanticall it describes the changing of a control (as
// requested by the vessel) and not the description of it's state.
type ChangeControl struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are valid to be assigned to ControlTypeValue:
	//	*ChangeControl_Toggle
	//	*ChangeControl_Throttle
	ControlTypeValue     isChangeControl_ControlTypeValue `protobuf_oneof:"ControlTypeValue"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *ChangeControl) Reset()         { *m = ChangeControl{} }
func (m *ChangeControl) String() string { return proto.CompactTextString(m) }
func (*ChangeControl) ProtoMessage()    {}
func (*ChangeControl) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4fb39f201265875, []int{3}
}

func (m *ChangeControl) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangeControl.Unmarshal(m, b)
}
func (m *ChangeControl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangeControl.Marshal(b, m, deterministic)
}
func (m *ChangeControl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeControl.Merge(m, src)
}
func (m *ChangeControl) XXX_Size() int {
	return xxx_messageInfo_ChangeControl.Size(m)
}
func (m *ChangeControl) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeControl.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeControl proto.InternalMessageInfo

func (m *ChangeControl) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type isChangeControl_ControlTypeValue interface {
	isChangeControl_ControlTypeValue()
}

type ChangeControl_Toggle struct {
	Toggle bool `protobuf:"varint,2,opt,name=toggle,proto3,oneof"`
}

type ChangeControl_Throttle struct {
	Throttle int32 `protobuf:"varint,3,opt,name=throttle,proto3,oneof"`
}

func (*ChangeControl_Toggle) isChangeControl_ControlTypeValue() {}

func (*ChangeControl_Throttle) isChangeControl_ControlTypeValue() {}

func (m *ChangeControl) GetControlTypeValue() isChangeControl_ControlTypeValue {
	if m != nil {
		return m.ControlTypeValue
	}
	return nil
}

func (m *ChangeControl) GetToggle() bool {
	if x, ok := m.GetControlTypeValue().(*ChangeControl_Toggle); ok {
		return x.Toggle
	}
	return false
}

func (m *ChangeControl) GetThrottle() int32 {
	if x, ok := m.GetControlTypeValue().(*ChangeControl_Throttle); ok {
		return x.Throttle
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ChangeControl) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ChangeControl_Toggle)(nil),
		(*ChangeControl_Throttle)(nil),
	}
}

func init() {
	proto.RegisterEnum("lsfn.ControlDescription_ControlType", ControlDescription_ControlType_name, ControlDescription_ControlType_value)
	proto.RegisterType((*ThrottleRange)(nil), "lsfn.ThrottleRange")
	proto.RegisterType((*ControlDescription)(nil), "lsfn.ControlDescription")
	proto.RegisterType((*ControlState)(nil), "lsfn.ControlState")
	proto.RegisterType((*ChangeControl)(nil), "lsfn.ChangeControl")
}

func init() { proto.RegisterFile("api/proto/control.proto", fileDescriptor_c4fb39f201265875) }

var fileDescriptor_c4fb39f201265875 = []byte{
	// 303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0x41, 0x4f, 0xbb, 0x40,
	0x10, 0xc5, 0x0b, 0xff, 0xfe, 0x29, 0x1d, 0x4a, 0x43, 0xc6, 0x83, 0x1c, 0x3c, 0x34, 0xc4, 0x43,
	0x4f, 0x34, 0xa9, 0x5e, 0xbc, 0x5a, 0x63, 0x7a, 0x5e, 0x89, 0x9e, 0xd7, 0x76, 0xa5, 0xab, 0xb0,
	0x4b, 0x96, 0x6d, 0xa2, 0x1f, 0xdb, 0x6f, 0x60, 0x18, 0xc0, 0xd0, 0xf4, 0xec, 0x6d, 0xdf, 0xbc,
	0x9d, 0xdf, 0xbe, 0x47, 0x80, 0x4b, 0x5e, 0xc9, 0x55, 0x65, 0xb4, 0xd5, 0xab, 0x9d, 0x56, 0xd6,
	0xe8, 0x22, 0x25, 0x85, 0xe3, 0xa2, 0x7e, 0x53, 0xc9, 0x0b, 0x84, 0xd9, 0xc1, 0x68, 0x6b, 0x0b,
	0xc1, 0xb8, 0xca, 0x05, 0xc6, 0x30, 0x29, 0xa5, 0x92, 0xe5, 0xb1, 0x8c, 0x9d, 0x85, 0xb3, 0xfc,
	0xcf, 0x7a, 0x49, 0x0e, 0xff, 0x24, 0xc7, 0xed, 0x9c, 0x56, 0x22, 0xc2, 0xb8, 0xb6, 0xa2, 0x8a,
	0xff, 0xd1, 0x98, 0xce, 0xc9, 0xb7, 0x03, 0xb8, 0x69, 0x1f, 0x7c, 0x10, 0xf5, 0xce, 0xc8, 0xca,
	0x4a, 0xad, 0x70, 0x0e, 0xae, 0xdc, 0x13, 0x79, 0xca, 0x5c, 0xb9, 0x6f, 0x56, 0x15, 0x2f, 0x05,
	0x11, 0xa7, 0x8c, 0xce, 0xf8, 0x08, 0x41, 0x17, 0x35, 0xfb, 0xaa, 0x04, 0x51, 0xe7, 0xeb, 0xeb,
	0xb4, 0xc9, 0x9b, 0x9e, 0x23, 0xfb, 0x51, 0x73, 0x97, 0x0d, 0x17, 0xf1, 0x0e, 0x42, 0x3b, 0xec,
	0x16, 0x8f, 0x17, 0xce, 0x32, 0x58, 0x5f, 0xb4, 0xa4, 0x93, 0xda, 0xec, 0xf4, 0x66, 0x72, 0x0b,
	0xc1, 0x00, 0x8b, 0x00, 0x5e, 0xa6, 0xf3, 0xbc, 0x10, 0xd1, 0x08, 0x03, 0x98, 0x64, 0x46, 0xe6,
	0xb9, 0x30, 0x91, 0x83, 0x33, 0xf0, 0x7b, 0x4e, 0xe4, 0x26, 0xef, 0x30, 0xeb, 0xb6, 0x9e, 0x2c,
	0xb7, 0xe2, 0xac, 0x6c, 0x0c, 0x9e, 0x25, 0x0c, 0xd5, 0xf5, 0xb7, 0x23, 0xd6, 0x69, 0xbc, 0x02,
	0xbf, 0x0f, 0xd0, 0x7e, 0xc5, 0xed, 0x88, 0xfd, 0x4e, 0xee, 0x11, 0xa2, 0x41, 0x9a, 0x67, 0x5e,
	0x1c, 0x45, 0xf2, 0x01, 0xe1, 0xe6, 0xd0, 0x64, 0xed, 0x9c, 0xbf, 0x7c, 0xec, 0xd5, 0xa3, 0x5f,
	0xe6, 0xe6, 0x27, 0x00, 0x00, 0xff, 0xff, 0xbf, 0x1e, 0x89, 0xff, 0x4d, 0x02, 0x00, 0x00,
}
